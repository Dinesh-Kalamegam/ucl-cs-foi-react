{"version":3,"sources":["NavBar.js","BarChart.js","Home.js","Level.js","ModuleChart.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","process","activeClassName","BarChart","props","data","labels","arr","map","x","datasets","label","text","backgroundColor","Home","data2015","data2016","data2017","data2018","compare","a","b","Mean","Level","bar_text","level","toString","filter","sort","key","ModuleChart","means","percentile_5","percentile_25","percentile_75","percentile_95","module_name","entries","i","element","modulecodes","includes","modcode","indexOf","chart_data","Object","values","fill","borderColor","options","title","display","fontSize","legend","position","responsive","scales","xAxes","scaleLabel","labelString","yAxes","App","require","moduledata","exact","path","mod_path","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a3e2900d.chunk.js","sourcesContent":["import React from 'react'\nimport {NavLink} from 'react-router-dom'\nimport './App.css'\n\nfunction Navbar(){\n    return(\n        // This navbar uses the Router component in App js that it is wrapped around \n        <div>\n            <ul className=\"nav-bar\">\n                <li className=\"nav-item\">UCL Computer Science Module Marks</li>\n                <li><NavLink to={process.env.PUBLIC_URL+`/`} activeClassName=\"active\"> Home </NavLink></li>\n                <li><NavLink to={process.env.PUBLIC_URL+`/level6`} activeClassName=\"active\"> Level 6 </NavLink></li>\n                <li><NavLink to={process.env.PUBLIC_URL+`/level7`} activeClassName=\"active\"> Level 7 </NavLink></li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Navbar","import React, {} from 'react'\nimport {Bar} from 'react-chartjs-2'\n\nfunction BarChart(props){\n    // console.log(props.arr.map(x => x[\"Module Code\"]))\n    const data = { \n            labels: props.arr.map(x => x[\"Module Code\"]),\n            datasets: [\n                {\n                    label: props.text,\n                    data: props.arr.map(x => x[\"Mean\"]),\n                    backgroundColor:\"skyblue\"\n                }\n            ]\n            \n        }\n\n        \n        return(<Bar data={data}/>)\n    }\n\n\nexport default BarChart","import React, { } from 'react'\nimport BarChart from './BarChart'\n\nfunction Home(props) {\n    const [data2015,data2016,data2017,data2018] = props.data\n\n\n    return (\n        <div>\n            <BarChart text=\"Comparison of means for year 2015/6\" arr={data2015} > </BarChart>    \n            <BarChart text=\"Comparison of means for year 2016/7\" arr={data2016} > </BarChart>  \n            <BarChart text=\"Comparison of means for year 2017/8\" arr={data2017}> </BarChart>  \n            <BarChart text=\"Comparison of means for year 2018/9\" arr={data2018} > </BarChart>  \n\n        </div>\n    )\n}\n\nexport default Home","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './App.css'\nimport BarChart from './BarChart'\n\nfunction compare(a, b) {\n    if (a.Mean < b.Mean) {\n        return -1;\n    }\n    if (a.Mean > b.Mean) {\n        return 1;\n    }\n    return 0;\n}\n\n\nfunction Level(props) {\n    const data2018 = props.data[3]\n    const bar_text = \"Comparison of 2018/9 mean marks for Level \" + props.level.toString()\n    return (\n        <div className=\"level\">\n            <BarChart text ={bar_text} arr={data2018.filter(x => x.Level === props.level).sort(compare)}></BarChart>\n            {data2018.filter(x => x.Level === props.level).map(x => (\n                <div className=\"card\" key={x[\"Module Code\"]}>\n                    <Link to={process.env.PUBLIC_URL + \"/\" + x[\"Module Code\"]}>\n\n                        <div className=\"card-header\">\n                            <h2> {x[\"Module Code\"]} </h2>\n                        </div>\n\n                        <div className=\"card-main\">\n                            <h2 className=\"main-description\"> {x[\"Module Name\"]} </h2>\n                        </div>\n                    </Link>\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default Level","import React from 'react'\nimport { Line } from 'react-chartjs-2'\nimport './App.css'\n\nfunction ModuleChart(props) {\n    const years = [2015, 2016, 2017, 2018]\n    const means = {}\n    const percentile_5 = {}\n    const percentile_25 = {}\n    const percentile_75 = {}\n    const percentile_95 = {}\n    let module_name = \"\"\n\n    for (const [i, element] of props.data.entries()) {\n        let modulecodes = element.map(x => x[\"Module Code\"])\n\n        if (modulecodes.includes(props.modcode)) {\n            means[i] = element[modulecodes.indexOf(props.modcode)]['Mean']\n            percentile_5[i] = element[modulecodes.indexOf(props.modcode)]['5th']\n            percentile_25[i] = element[modulecodes.indexOf(props.modcode)]['25th']\n            percentile_75[i] = element[modulecodes.indexOf(props.modcode)]['75th']\n            percentile_95[i] = element[modulecodes.indexOf(props.modcode)]['95th']\n            module_name = element[modulecodes.indexOf(props.modcode)][\"Module Name\"]\n        }\n        else {\n            means[i] = 0\n            percentile_5[i] = 0\n            percentile_25[i] = 0\n            percentile_75[i] = 0\n            percentile_95[i] = 0\n        }\n    }\n\n    const fill_val = false\n    const chart_data = {\n        labels: years,\n        datasets: [\n            {\n                label: \"Mean\",\n                data: Object.values(means),\n                fill: fill_val,\n                borderColor: \"black\",\n\n            },\n\n            {\n                label: \"5th\",\n                data: Object.values(percentile_5),\n                fill: fill_val,\n                borderColor: \"red\",\n            },\n            {\n                label: \"25th\",\n                data: Object.values(percentile_25),\n                fill: fill_val,\n                borderColor: \"purple\",\n            },\n            {\n                label: \"75th\",\n                data: Object.values(percentile_75),\n                fill: fill_val,\n                borderColor: \"blue\",\n            },\n            {\n                label: \"95th\",\n                data: Object.values(percentile_95),\n                fill: fill_val,\n                borderColor: \"green\",\n            }\n        ],\n    }\n\n    return (\n        <div className=\"module-chart-box\">\n            <Line\n                data={chart_data}\n                options={{\n                    title: {\n                        display: true,\n                        text: [props.modcode + \" : \" + module_name, \" Percentiles over 2015/6-2018/9\"],\n                        fontSize: 25,\n                    },\n                    legend: { position: 'top' },\n                    responsive: true,\n                    scales: {\n                        xAxes: [{\n                            scaleLabel: {\n                                display: true,\n                                labelString: 'Year',\n                                fontSize: 15\n                            }\n                        }],\n                        yAxes: [{\n                            scaleLabel: {\n                                display: true,\n                                labelString: 'Mark',\n                                fontSize: 15\n                            }\n                        }]\n                    },\n\n                }\n                }\n\n\n            >\n            </Line>\n        </div>\n    )\n\n}\n\n\nexport default ModuleChart","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport './App.css';\nimport Navbar from './NavBar'\nimport Home from './Home'\nimport Level from './Level'\nimport ModuleChart from './ModuleChart';\n\nfunction App() {\n  let data2015 = require(\"./cs-module-data/data_2015_6.json\")\n  let data2016 = require(\"./cs-module-data/data_2016_7.json\")\n  let data2017 = require(\"./cs-module-data/data_2017_8.json\")\n  let data2018 = require(\"./cs-module-data/data_2018_9.json\")\n  const moduledata = [data2015, data2016, data2017, data2018]\n\n  let modulecodes = data2018.map(x => x[\"Module Code\"])\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route exact path={process.env.PUBLIC_URL+\"/\"}><Home data={moduledata} />  </Route>\n          <Route exact path={process.env.PUBLIC_URL+\"/level6\"}><Level level={6} data={moduledata} />  </Route>\n          <Route exact path={process.env.PUBLIC_URL+\"/level7\"}><Level level={7} data={moduledata} />  </Route>\n\n          {\n            modulecodes.map(x => {\n              let mod_path = \"/\";\n              mod_path = mod_path.concat(x);\n              return <Route exact path={process.env.PUBLIC_URL+mod_path} key={x}> <ModuleChart data={moduledata} modcode={x} /> </Route>\n            })\n          }\n\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}